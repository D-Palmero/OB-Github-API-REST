{"ast":null,"code":"var _jsxFileName = \"/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js\",\n    _s = $RefreshSig$();\n\nimport { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Lines from './Lines';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Details = _ref => {\n  _s();\n\n  let {\n    url,\n    user,\n    repo\n  } = _ref;\n  const [content, setContent] = useState('');\n  const [num, setNum] = useState('');\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(url);\n      const contents = await result.json();\n      setContent(contents);\n    })();\n  }, [url]);\n\n  const getType = file => {\n    if (file.type === 'blob') return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: file.path\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 20\n    }, this);else return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", file.path]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 20\n    }, this);\n  };\n\n  const getCount = () => {\n    let lang = {};\n    let ext;\n    let files = content.tree;\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].type !== 'tree') {\n        if (files[i].path.lastIndexOf('.') !== -1) ext = files[i].path.substr(files[i].path.lastIndexOf('.'));else ext = files[i].path;\n        if (ext.lastIndexOf('/') !== -1) ext = ext.substr(ext.lastIndexOf('/'));\n        if (lang[ext] !== undefined) lang[ext] += 1;else lang[ext] = 1;\n      }\n    }\n\n    return lang;\n  };\n\n  const getUrl = file => {\n    let url1 = \"https://raw.githubusercontent.com/\" + user + \"/\" + repo + \"/main/\" + file.path;\n    return url1;\n  };\n\n  const showFilesCount = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(getCount()).map(_ref2 => {\n        let [key, value] = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [key, \" : \", value]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  };\n\n  const showFiles = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content.tree.map((file, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [getType(file), showLines(file)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  };\n\n  const showLines = file => {\n    if (file.type === 'blob') return /*#__PURE__*/_jsxDEV(Lines, {\n      url: getUrl(file),\n      repo: repo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 20\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"El n\\xFAmero de archivos es:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), typeof content === 'object' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [showFilesCount(), showFiles()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El repositorio no tiene contenido\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Details, \"kbuaCQj+7JFJ0422dOSM8aXyfyE=\");\n\n_c = Details;\nexport default Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js"],"names":["getSuggestedQuery","React","useState","useEffect","Lines","Details","url","user","repo","content","setContent","num","setNum","result","fetch","contents","json","getType","file","type","path","getCount","lang","ext","files","tree","i","length","lastIndexOf","substr","undefined","getUrl","url1","showFilesCount","Object","entries","map","key","value","showFiles","index","showLines"],"mappings":"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","sourcesContent":["import { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Lines from './Lines'\n\nconst Details = ({ url, user, repo }) => {\n    const [content, setContent] = useState('')\n    const [num, setNum] = useState('')\n\n    useEffect(() => {\n        (async() => {\n            const result = await fetch(url)\n\t        const contents = await result.json()\n            \n            setContent(contents)\n        })()\n    }, [url])\n\n    const getType = (file) => {\n        if (file.type === 'blob')\n            return <h4>{ file.path }</h4>\n        else\n            return <h1> { file.path }</h1>\n    }\n\n    const getCount = () => {\n        let lang = {}\n        let ext\n        let files = content.tree\n        \n        for (let i = 0; i < files.length; i++) {\n            if (files[i].type !== 'tree') {\n                if (files[i].path.lastIndexOf('.') !== -1)\n                    ext = files[i].path.substr(files[i].path.lastIndexOf('.'))\n                else\n                    ext = files[i].path\n                if (ext.lastIndexOf('/') !== -1)\n                ext = ext.substr(ext.lastIndexOf('/'))\n                if (lang[ext] !== undefined)\n                    lang[ext] += 1\n                else\n                    lang[ext] = 1\n            }\n        }\n        return lang\n    }\n\n    const getUrl = (file) => { \n        let url1 = \"https://raw.githubusercontent.com/\" + user + \"/\" + repo + \"/main/\" + file.path\n        return url1\n    }\n\n    const showFilesCount = () => {\n        return (\n            <div>\n                 { Object.entries(getCount()).map(([key, value]) => {\n                    return (\n                        <h4 key={key}>{key} : {value}</h4>\n                    )\n                }) }\n            </div>\n        )\n    }\n    const showFiles = () => {\n        return (\n            <div>\n            {content.tree.map((file, index) => {\n                return (\n                <div key = { index }>\n                    { getType(file) }\n                    { showLines(file)}\n                </div> )})}\n            </div>\n        )\n\n    }\n    const showLines = (file) => {\n        if (file.type === 'blob')\n            return <Lines url = { getUrl(file) } repo = { repo }/>\n    }\n    return(\n        \n        <div>\n            <h3>El n√∫mero de archivos es:</h3>\n            {typeof(content) === 'object' ? \n            (<div >\n                { showFilesCount() }\n                { showFiles() }\n                \n            </div> \n            )\n            :\n            <p>El repositorio no tiene contenido</p>\n            }\n        </div>\n    )\n    }\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}