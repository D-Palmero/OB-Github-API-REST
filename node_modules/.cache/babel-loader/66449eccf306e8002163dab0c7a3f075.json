{"ast":null,"code":"var _jsxFileName = \"/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/App.js\";\nimport { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      repositories: []\n    };\n\n    this.getUser = async e => {\n      const userName = e.target.elements.userName.value;\n      const apiURL = await fetch(`https://api.github.com/users/${userName}/repos`);\n      const data = await apiURL.json();\n      this.setState({\n        repositories: data\n      });\n      console.log(this.state.repositories);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"App-title\",\n          children: \"Github API REST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        getUser: this.getUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 3\n      }, this), this.state.repositories.map((repository, index) => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", repository.name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/App.js"],"names":["render","React","Component","Form","App","state","repositories","getUser","e","userName","target","elements","value","apiURL","fetch","data","json","setState","console","log","map","repository","index","name"],"mappings":";AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACTC,MAAAA,YAAY,EAAE;AADL,KADkB;;AAAA,SAK1BC,OAL0B,GAKhB,MAAOC,CAAP,IAAa;AACxB,YAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBF,QAAlB,CAA2BG,KAA5C;AAEA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,gCAA+BL,QAAS,QAA1C,CAA1B;AAEA,YAAMM,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;AACA,WAAKC,QAAL,CAAe;AAAEX,QAAAA,YAAY,EAAES;AAAhB,OAAf;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWC,YAAvB;AACE,KAbyB;AAAA;;AAe1BN,EAAAA,MAAM,GAAG;AACV,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACD;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,+BACE;AAAI,UAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADC,eAID,QAAC,IAAD;AAAM,QAAA,OAAO,EAAK,KAAKO;AAAvB;AAAA;AAAA;AAAA;AAAA,cAJC,EAKC,KAAKF,KAAL,CAAWC,YAAX,CAAwBc,GAAxB,CAA4B,CAACC,UAAD,EAAcC,KAAd,KAAwB;AACrD,4BAAO;AAAA,0BAAsBD,UAAU,CAACE,IAAjC;AAAA,WAAUD,KAAV;AAAA;AAAA;AAAA;AAAA,gBAAP;AACA,OAFC,CALD;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWE;;AA3ByB;;AA8B5B,eAAelB,GAAf","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\n\nclass App extends Component {\n  state = {\n\trepositories: []\n  }\n\n  getUser = async (e) => {\n\tconst userName = e.target.elements.userName.value;\n\t\n\tconst apiURL = await fetch(`https://api.github.com/users/${userName}/repos`);\n\n\tconst data = await apiURL.json();\n\tthis.setState( { repositories: data });\n\tconsole.log(this.state.repositories)\n  }\n\n  render() {\n\treturn (\n\t  <div className=\"App\">\n\t\t<header className=\"App-header\">\n\t\t  <h1 className=\"App-title\">Github API REST</h1>\n\t\t</header>\n\t\t<Form getUser = { this.getUser }/>\n\t\t{ this.state.repositories.map((repository , index) => {\n\t\t\treturn <p key= { index } > { repository.name }</p>\n\t\t})}\n\t  </div>\n\t)\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}