{"ast":null,"code":"var _jsxFileName = \"/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Details = _ref => {\n  _s();\n\n  let {\n    url\n  } = _ref;\n  const [content, setContent] = useState('');\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(url);\n      const contents = await result.json();\n      setContent(contents);\n    })();\n  }, [url]);\n\n  const getType = file => {\n    let ext;\n    if (file.lastIndexOf('.') !== -1) ext = file.substr(file.lastIndexOf('.'));else ext = file;\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" \", file]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  };\n\n  const getCount = () => {\n    let arr = [];\n\n    for (let i = 0; i < content.tree.length; i++) console.log(\"hello\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Los archivos son:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), typeof content === 'object' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [content.tree.map((file, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getType(file.path)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this);\n      }), getCount()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El repositorio no tiene contenido\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Details, \"wipnac41BTB3eHT+ORLT1pgXER0=\");\n\n_c = Details;\nexport default Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js"],"names":["React","useState","useEffect","Details","url","content","setContent","result","fetch","contents","json","getType","file","ext","lastIndexOf","substr","getCount","arr","i","tree","length","console","log","map","index","path"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAGA,MAAMC,OAAO,GAAG,QAAa;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAW;AACR,YAAMK,MAAM,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA1B;AACH,YAAMK,QAAQ,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAvB;AAEGJ,MAAAA,UAAU,CAACG,QAAD,CAAV;AACH,KALD;AAMH,GAPQ,EAON,CAACL,GAAD,CAPM,CAAT;;AASA,QAAMO,OAAO,GAAIC,IAAD,IAAU;AACtB,QAAIC,GAAJ;AACA,QAAID,IAAI,CAACE,WAAL,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EACID,GAAG,GAAGD,IAAI,CAACG,MAAL,CAAYH,IAAI,CAACE,WAAL,CAAiB,GAAjB,CAAZ,CAAN,CADJ,KAGID,GAAG,GAAGD,IAAN;AACJ,wBAAO;AAAA,sBAAOA,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAPD;;AASA,QAAMI,QAAQ,GAAG,MAAM;AACnB,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACc,IAAR,CAAaC,MAAjC,EAAyCF,CAAC,EAA1C,EACIG,OAAO,CAACC,GAAR,CAAY,OAAZ;AACP,GAJD;;AAKA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEK,OAAOjB,OAAP,KAAoB,QAApB,gBACA;AAAA,iBACIA,OAAO,CAACc,IAAR,CAAaI,GAAb,CAAiB,CAACX,IAAD,EAAOY,KAAP,KAAiB;AAC/B,4BACA;AAAA,oBACMb,OAAO,CAACC,IAAI,CAACa,IAAN;AADb,WAAaD,KAAb;AAAA;AAAA;AAAA;AAAA,gBADA;AAGS,OAJZ,CADJ,EAMKR,QAAQ,EANb;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,gBAWD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBC,CA5CL;;GAAMb,O;;KAAAA,O;AA8CN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nconst Details = ({ url }) => {\n    const [content, setContent] = useState('')\n\n    useEffect(() => {\n        (async() => {\n            const result = await fetch(url)\n\t        const contents = await result.json()\n            \n            setContent(contents)\n        })()\n    }, [url])\n\n    const getType = (file) => {\n        let ext\n        if (file.lastIndexOf('.') !== -1)\n            ext = file.substr(file.lastIndexOf('.'))\n        else\n            ext = file\n        return <h4> { file }</h4>\n    }\n\n    const getCount = () => {\n        let arr = []\n        for (let i = 0; i < content.tree.length; i++)\n            console.log(\"hello\")\n    }\n    return(\n        <div>\n            <h3>Los archivos son:</h3>\n            {typeof(content) === 'object' ? \n            (<div >\n                {content.tree.map((file, index) => {\n                    return (\n                    <div key = { index }>\n                        { getType(file.path) }\n                    </div> )})}\n                { getCount() }\n            </div> \n            )\n            :\n            <p>El repositorio no tiene contenido</p>\n            }\n        </div>\n    )\n    }\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}