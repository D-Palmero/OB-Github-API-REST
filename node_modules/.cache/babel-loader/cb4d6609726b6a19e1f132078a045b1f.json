{"ast":null,"code":"var _jsxFileName = \"/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { render } from '@testing-library/react';\nimport React, { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Repositories from './components/Repositories';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  /*\n    getUser = async (e) => {\n  \tconst userName = e.target.elements.userName.value;\n  \te.preventDefault()\n  \tfetch(`https://api.github.com/users/${userName}/repos`)\n  \t.then(response => response.json())\n  \t.then(data => {\n  \t\tconsole.log(data.length)\n  \t\tconst com = {}, arr = []\n  \t\tdata.forEach(repository => {\n  \t\t\tfetch(`${repository.commits_url.slice(0, -6)}`)\n  \t\t\t.then(response => response.json())\n  \t\t\t.then(data => {\n  \t\t\t\tdata.forEach(commit => {\n  \t\t\t\t\tcom.html_url = commit.html_url\n  \t\t\t\t\tcom.url = commit.url\n  \t\t\t\t\tarr.push(com)\n  \t\t\t\t})\n  \t\t\t})\n  \t\t\tthis.setState(prevState => ({\n  \t\t\t\t\trepositories: [...prevState.repositories,  {\n  \t\t\t\t\t\t\"name\": repository.name,\n  \t\t\t\t\t\t\"link\": repository.html_url,\n  \t\t\t\t\t\t\"languages\": repository.languages_url,\n  \t\t\t\t\t\t\"commits\": arr\n  \t\t\t\t\t}]\n  \t\t\t\t}));\n  \t\t\t\n  \t\t})\n  \t})\n    }\n    getUser = async (e) => {\n  \tconst userName = e.target.elements.userName.value;\n  \te.preventDefault()\n  \tconst result = await fetch(`https://api.github.com/users/${userName}/repos`)\n  \tlet repos = await result.json()\n  \tthis.setState( {repositories: repos } )\n    }\n  \n    getCommits = (repo) => async() => {\n  \t    const result = await fetch(`${repo}`)\n  \t    let response = await result.json()\n          this.setState( {commits: await response})\n      }\n  */\n  const [user, setUser] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"App-title\",\n        children: \"Github API REST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        setUser(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"userName\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 3\n    }, this), user ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"hello \", user]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 4\n  }, this);\n};\n\n_s(App, \"66uDv7Gp2hqhGvYfL/E9BkdlaiQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/App.js"],"names":["render","React","Component","useState","useEffect","Form","Repositories","App","user","setUser","e","preventDefault","target","value"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAO,WAAP;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACD;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADC,eAID;AAAM,MAAA,QAAQ,EAAMO,CAAD,IAAO;AACzBA,QAAAA,CAAC,CAACC,cAAF;AACAF,QAAAA,OAAO,CAACC,CAAC,CAACE,MAAF,CAASC,KAAV,CAAP;AAAyB,OAF1B;AAAA,8BAGO;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,cAHP,eAIM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJN;AAAA;AAAA;AAAA;AAAA;AAAA,YAJC,EAWCL,IAAI,gBAAG;AAAA,2BAAUA,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAEN,EAbC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBA,CAvED;;GAAMD,G;;KAAAA,G;AAyEN,eAAeA,GAAf","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component, useState, useEffect } from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport Repositories from './components/Repositories';\n\nconst App = () => {\n  \n/*\n  getUser = async (e) => {\n\tconst userName = e.target.elements.userName.value;\n\te.preventDefault()\n\tfetch(`https://api.github.com/users/${userName}/repos`)\n\t.then(response => response.json())\n\t.then(data => {\n\t\tconsole.log(data.length)\n\t\tconst com = {}, arr = []\n\t\tdata.forEach(repository => {\n\t\t\tfetch(`${repository.commits_url.slice(0, -6)}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tdata.forEach(commit => {\n\t\t\t\t\tcom.html_url = commit.html_url\n\t\t\t\t\tcom.url = commit.url\n\t\t\t\t\tarr.push(com)\n\t\t\t\t})\n\t\t\t})\n\t\t\tthis.setState(prevState => ({\n\t\t\t\t\trepositories: [...prevState.repositories,  {\n\t\t\t\t\t\t\"name\": repository.name,\n\t\t\t\t\t\t\"link\": repository.html_url,\n\t\t\t\t\t\t\"languages\": repository.languages_url,\n\t\t\t\t\t\t\"commits\": arr\n\t\t\t\t\t}]\n\t\t\t\t}));\n\t\t\t\n\t\t})\n\t})\n  }\n  getUser = async (e) => {\n\tconst userName = e.target.elements.userName.value;\n\te.preventDefault()\n\tconst result = await fetch(`https://api.github.com/users/${userName}/repos`)\n\tlet repos = await result.json()\n\tthis.setState( {repositories: repos } )\n  }\n\n  getCommits = (repo) => async() => {\n\t    const result = await fetch(`${repo}`)\n\t    let response = await result.json()\n        this.setState( {commits: await response})\n    }\n*/\n\tconst [user, setUser] = useState('')\n\n\t\n\n\t\n\treturn (\n\t  <div className=\"App\">\n\t\t<header className=\"App-header\">\n\t\t  <h1 className=\"App-title\">Github API REST</h1>\n\t\t</header>\n\t\t<form onSubmit = { (e) => { \n\t\t\te.preventDefault()\n\t\t\tsetUser(e.target.value) }}>\n        \t<input type=\"text\" name=\"userName\"></input>\n        <button>Search</button>\n    </form>\n\t\t{/*<Repositories repositories= { this.state.repositories } commits= {this.state.commits} getCommits= {this.getCommits}/>*/}\n\t\t{ user ? <p>hello {user}</p> \n\t\t:\n\t\t''\n\t\t}\n\t  </div>\n\t)\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}