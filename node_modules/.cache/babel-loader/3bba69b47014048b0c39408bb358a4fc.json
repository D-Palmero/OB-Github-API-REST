{"ast":null,"code":"var _jsxFileName = \"/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js\",\n    _s = $RefreshSig$();\n\nimport { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Lines from './Lines';\nimport { Container, Row, Col, Button, Card, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Details = _ref => {\n  _s();\n\n  let {\n    url,\n    user,\n    repo,\n    branch\n  } = _ref;\n  const [content, setContent] = useState('');\n  const [num, setNum] = useState('');\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(url, {\n        headers: {\n          Authorization: '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'\n        }\n      });\n      const contents = await result.json();\n      setContent(contents);\n    })();\n  }, [url]);\n\n  const getType = file => {\n    if (file.type === 'blob') return /*#__PURE__*/_jsxDEV(Card.Header, {\n      children: file.path\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 20\n    }, this);else return /*#__PURE__*/_jsxDEV(Card.Header, {\n      children: [\" \", file.path]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 20\n    }, this);\n  };\n\n  const getCount = () => {\n    let lang = {};\n    let ext;\n    let files = content.tree;\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].type !== 'tree') {\n        if (files[i].path.lastIndexOf('.') !== -1) ext = files[i].path.substr(files[i].path.lastIndexOf('.'));else ext = files[i].path;\n        if (ext.lastIndexOf('/') !== -1) ext = ext.substr(ext.lastIndexOf('/'));\n        if (lang[ext] !== undefined) lang[ext] += 1;else lang[ext] = 1;\n      }\n    }\n\n    return lang;\n  };\n\n  const getUrl = file => {\n    let url1 = \"https://raw.githubusercontent.com/\" + user + \"/\" + repo + \"/\" + branch + \"/\" + file.path;\n    return url1;\n  };\n\n  const showFilesCount = () => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: \"El n\\xFAmero de archivos es:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), Object.entries(getCount()).map(_ref2 => {\n        let [key, value] = _ref2;\n        return /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [key, \" : \", value]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  };\n\n  const showFiles = () => {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: content.tree.map((file, index) => {\n        const color = file.type === 'tree' ? 'info' : 'light';\n        return /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            bg: color,\n            children: getType(file)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: showLines(file)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  };\n\n  const showLines = file => {\n    if (file.type === 'blob') return /*#__PURE__*/_jsxDEV(Lines, {\n      url: getUrl(file),\n      repo: repo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 20\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: typeof content === 'object' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [showFilesCount(), showFiles()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El repositorio no tiene contenido\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Details, \"kbuaCQj+7JFJ0422dOSM8aXyfyE=\");\n\n_c = Details;\nexport default Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js"],"names":["getSuggestedQuery","React","useState","useEffect","Lines","Container","Row","Col","Button","Card","Form","Details","url","user","repo","branch","content","setContent","num","setNum","result","fetch","headers","Authorization","contents","json","getType","file","type","path","getCount","lang","ext","files","tree","i","length","lastIndexOf","substr","undefined","getUrl","url1","showFilesCount","Object","entries","map","key","value","showFiles","index","color","showLines"],"mappings":"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","sourcesContent":["import { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Lines from './Lines'\nimport { Container, Row, Col, Button, Card, Form } from 'react-bootstrap'\n\nconst Details = ({ url, user, repo, branch }) => {\n    const [content, setContent] = useState('')\n    const [num, setNum] = useState('')\n\n    useEffect(() => {\n        (async() => {\n            const result = await fetch(url, {\n                headers: { Authorization: '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' }\n            })\n\t        const contents = await result.json()\n            \n            setContent(contents)\n        })()\n    }, [url])\n\n    const getType = (file) => {\n        if (file.type === 'blob')\n            return <Card.Header>{ file.path }</Card.Header>\n        else\n            return <Card.Header> { file.path }</Card.Header>\n    }\n\n    const getCount = () => {\n        let lang = {}\n        let ext\n        let files = content.tree\n        \n        for (let i = 0; i < files.length; i++) {\n            if (files[i].type !== 'tree') {\n                if (files[i].path.lastIndexOf('.') !== -1)\n                    ext = files[i].path.substr(files[i].path.lastIndexOf('.'))\n                else\n                    ext = files[i].path\n                if (ext.lastIndexOf('/') !== -1)\n                ext = ext.substr(ext.lastIndexOf('/'))\n                if (lang[ext] !== undefined)\n                    lang[ext] += 1\n                else\n                    lang[ext] = 1\n            }\n        }\n        return lang\n    }\n\n    const getUrl = (file) => { \n        let url1 = \"https://raw.githubusercontent.com/\" + user + \"/\" + repo + \"/\" + branch + \"/\" + file.path\n        return url1\n    }\n\n    const showFilesCount = () => {\n        return (\n            <Card >\n                <Card.Header>El número de archivos es:</Card.Header>\n                 { Object.entries(getCount()).map(([key, value]) => {\n                    return (\n                        <Card.Text key={key}>{key} : {value}</Card.Text>\n                    )\n                }) }\n            </Card>\n        )\n    }\n    const showFiles = () => {\n        return (\n            <Container>\n            {content.tree.map((file, index) => {\n                const color = (file.type === 'tree' ? 'info' : 'light')\n                return (\n                <Card key = { index }>\n                    <Card.Header bg={ color }>{ getType(file) }</Card.Header>\n                    <Card.Text>{ showLines(file)}</Card.Text>\n                </Card> )})}\n            </Container>\n        )\n\n    }\n    const showLines = (file) => {\n        if (file.type === 'blob')\n            return <Lines url = { getUrl(file) } repo = { repo }/>\n    }\n    return(\n        \n        <Container>\n            \n            {typeof(content) === 'object' ?\n            (<div >\n                { showFilesCount() }\n                { showFiles() }\n            </div> \n            )\n            :\n            <p>El repositorio no tiene contenido</p>\n            }\n        </Container>\n    )\n    }\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}