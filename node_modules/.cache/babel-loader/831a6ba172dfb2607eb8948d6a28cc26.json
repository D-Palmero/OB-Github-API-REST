{"ast":null,"code":"var _jsxFileName = \"/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js\",\n    _s = $RefreshSig$();\n\nimport { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Lines from './Lines';\nimport { Container, Row, Col, Button, Card, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Details = _ref => {\n  _s();\n\n  let {\n    url,\n    user,\n    repo,\n    branch\n  } = _ref;\n  const [content, setContent] = useState('');\n  const [ready2, setReady2] = useState(true);\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(url, {\n        headers: {\n          Authorization: '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'\n        }\n      });\n      const contents = await result.json();\n      setContent(contents);\n    })();\n  }, [url]);\n\n  const getReady2 = state => e => {\n    e.preventDefault();\n    setReady2(state);\n  };\n\n  const getCount = () => {\n    let lang = {};\n    let ext;\n    let files = content.tree;\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].type !== 'tree') {\n        if (files[i].path.lastIndexOf('.') !== -1) ext = files[i].path.substr(files[i].path.lastIndexOf('.'));else ext = files[i].path;\n        if (ext.lastIndexOf('/') !== -1) ext = ext.substr(ext.lastIndexOf('/'));\n        if (lang[ext] !== undefined) lang[ext] += 1;else lang[ext] = 1;\n      }\n    }\n\n    return lang;\n  };\n\n  const showFilesCount = () => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: Object.entries(getCount()).map(_ref2 => {\n        let [key, value] = _ref2;\n        return /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [key, \" : \", value]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  };\n\n  const show = () => {\n    if (ready2) {\n      console.log(\"Here\");\n      showFilesCount();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: typeof content === 'object' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: show\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: getReady2(true),\n        children: \"Show files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El repositorio no tiene contenido\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Details, \"+IrLNOL54LYxrqXsVpUm80Lx71s=\");\n\n_c = Details;\nexport default Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js"],"names":["getSuggestedQuery","React","useState","useEffect","Lines","Container","Row","Col","Button","Card","Form","Details","url","user","repo","branch","content","setContent","ready2","setReady2","result","fetch","headers","Authorization","contents","json","getReady2","state","e","preventDefault","getCount","lang","ext","files","tree","i","length","type","path","lastIndexOf","substr","undefined","showFilesCount","Object","entries","map","key","value","show","console","log"],"mappings":"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","sourcesContent":["import { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Lines from './Lines'\nimport { Container, Row, Col, Button, Card, Form } from 'react-bootstrap'\n\nconst Details = ({ url, user, repo, branch }) => {\n    const [content, setContent] = useState('')\n    const [ready2, setReady2] = useState(true)\n\n\n\n\n    useEffect(() => {\n        (async() => {\n            const result = await fetch(url, {\n                headers: { Authorization: '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' }\n            })\n\t        const contents = await result.json()\n            \n            setContent(contents)\n        })()\n    }, [url])\n\n    const getReady2 = (state) => (e) => {\n        e.preventDefault()\n        setReady2(state)\n    }\n\n    const getCount = () => {\n        let lang = {}\n        let ext\n        let files = content.tree\n        \n        for (let i = 0; i < files.length; i++) {\n            if (files[i].type !== 'tree') {\n                if (files[i].path.lastIndexOf('.') !== -1)\n                    ext = files[i].path.substr(files[i].path.lastIndexOf('.'))\n                else\n                    ext = files[i].path\n                if (ext.lastIndexOf('/') !== -1)\n                ext = ext.substr(ext.lastIndexOf('/'))\n                if (lang[ext] !== undefined)\n                    lang[ext] += 1\n                else\n                    lang[ext] = 1\n            }\n        }\n        return lang\n    }\n\n\n    const showFilesCount = () => {\n        return (\n            <Card >\n                \n                 { Object.entries(getCount()).map(([key, value]) => {\n                    return (\n                        <Card.Text key={key}>{key} : {value}</Card.Text>\n                    )\n                }) }\n            </Card>\n        )\n    }\n    \n    const show = () => {\n        if (ready2) {\n            console.log(\"Here\")\n            showFilesCount()\n        }\n    }\n    return(\n        \n        <div>\n            \n            {typeof(content) === 'object' ?\n            (<div >\n                <div>{ show }</div>\n                <Button onClick = { getReady2(true)}>Show files</Button>\n            </div> \n            )\n            :\n            <p>El repositorio no tiene contenido</p>\n            }\n        </div>\n    )\n    }\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}