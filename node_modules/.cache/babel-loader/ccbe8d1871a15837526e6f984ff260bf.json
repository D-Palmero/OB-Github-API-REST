{"ast":null,"code":"var _jsxFileName = \"/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js\",\n    _s = $RefreshSig$();\n\nimport { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Details = _ref => {\n  _s();\n\n  let {\n    url\n  } = _ref;\n  const [content, setContent] = useState('');\n  const [num, setNum] = useState('');\n  useEffect(() => {\n    (async () => {\n      const result = await fetch(url);\n      const contents = await result.json();\n      setContent(contents);\n    })();\n  }, [url]);\n\n  const getType = file => {\n    /*\n    \n    */\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" \", file]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  };\n\n  const getCount = () => {\n    let lang = {};\n    let ext;\n    let files = content.tree;\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].type !== 'tree') {\n        if (files[i].path.lastIndexOf('.') !== -1) ext = files[i].path.substr(files[i].path.lastIndexOf('.'));else ext = files[i].path;\n        if (ext.lastIndexOf('/') !== -1) ext = ext.substr(ext.lastIndexOf('/'));\n        if (lang[ext] !== undefined) lang[ext] += 1;else lang[ext] = 1;\n      }\n    }\n\n    return lang;\n  };\n\n  const showLang = lang => {\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: JSON.stringify(lang)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"El n\\xFAmero de archivos es:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), typeof content === 'object' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Object.entries(getCount()).map(_ref2 => {\n        let [key, value] = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [key, \" : \", value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this);\n      }), content.tree.map((file, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getType(file.path)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El repositorio no tiene contenido\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Details, \"kbuaCQj+7JFJ0422dOSM8aXyfyE=\");\n\n_c = Details;\nexport default Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["/Users/dapalmer/Documents/OB-Github-API-REST/ob-github-api/src/components/Details.js"],"names":["getSuggestedQuery","React","useState","useEffect","Details","url","content","setContent","num","setNum","result","fetch","contents","json","getType","file","getCount","lang","ext","files","tree","i","length","type","path","lastIndexOf","substr","undefined","showLang","JSON","stringify","Object","entries","map","key","value","index"],"mappings":"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","sourcesContent":["import { getSuggestedQuery } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\n\n\nconst Details = ({ url }) => {\n    const [content, setContent] = useState('')\n    const [num, setNum] = useState('')\n\n    useEffect(() => {\n        (async() => {\n            const result = await fetch(url)\n\t        const contents = await result.json()\n            \n            setContent(contents)\n        })()\n    }, [url])\n\n    const getType = (file) => {\n        \n        /*\n        \n        */\n        return <h4> { file }</h4>\n    }\n\n    const getCount = () => {\n        let lang = {}\n        let ext\n        let files = content.tree\n        \n        for (let i = 0; i < files.length; i++) {\n            if (files[i].type !== 'tree') {\n                if (files[i].path.lastIndexOf('.') !== -1)\n                    ext = files[i].path.substr(files[i].path.lastIndexOf('.'))\n                else\n                    ext = files[i].path\n                if (ext.lastIndexOf('/') !== -1)\n                ext = ext.substr(ext.lastIndexOf('/'))\n                if (lang[ext] !== undefined)\n                    lang[ext] += 1\n                else\n                    lang[ext] = 1\n            }\n        }\n        return lang\n    }\n\n    const showLang = (lang) => { \n        return <h4>{JSON.stringify(lang)}</h4>\n    }\n    return(\n        <div>\n            <h3>El n√∫mero de archivos es:</h3>\n            {typeof(content) === 'object' ? \n            (<div >\n                { Object.entries(getCount()).map(([key, value]) => {\n                    return (\n                        <h4>{key} : {value}</h4>\n                    )\n                }) }\n                \n                {content.tree.map((file, index) => {\n                    return (\n                    <div key = { index }>\n                        { getType(file.path) }\n                    </div> )})}\n                \n            </div> \n            )\n            :\n            <p>El repositorio no tiene contenido</p>\n            }\n        </div>\n    )\n    }\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}